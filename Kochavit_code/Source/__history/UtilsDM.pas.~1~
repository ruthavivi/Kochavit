unit UtilsDM;

interface

uses
  SysUtils, Classes, DBTables, DB, TrapActionUtils;

type
  TdmUtils = class(TDataModule)
    qrSrcLvl1: TQuery;
    bmGnrl: TBatchMove;
    tbDest: TTable;
    qrSrcLvl2: TQuery;
    qrSrcLvl3: TQuery;
    qrSrcLvl4: TQuery;
    qrSrcTofes: TQuery;
    tbDestTofes: TTable;
    bmGnrlTofes: TBatchMove;
  private
    { Private declarations }
    procedure ShiftCLnDtl(Id, IdOldCl: String);
    procedure SetRelatedId(FName, IdVal: String);
    procedure ShiftAllCar(Id, IdOldCl: String);
    procedure ShiftCarDtl(IdCar, IdOldCr: String);
    procedure ShiftOneDtl(FName, FOldName, FldName, IdDtl, IdOldCr: String);
    procedure ShiftAllDrv(Id, IdOldCl: String);
    procedure ShiftDrvDtl(IdDrv, IdOldDr: String);
    procedure ShiftAllBill(Id, IdOldCl: String);
    procedure ShiftBillDtl(IdBill, IdOldBl: String);
    procedure ShiftTipSubDtl(TipulId, IdOldTp: String);
    procedure ShiftTipHisSubDtl(TipulId, IdOldTp: String);
    procedure ShiftAllDocs(Id, IdOldCl: String);
    procedure ShiftRec(sSql, dstName: String);
    procedure DeleteAllCar(Id: String);
    procedure DeleteAllDrv(Id: String);
    procedure DeleteAllBill(Id: String);
    procedure DeleteAllDocs(Id: String);
    procedure DeleteRecs(stSql: String);
    procedure DeleteRecsTofes(stSql: String);
  public
    { Public declarations }
    procedure ShiftClient(Id: String);
    procedure ShiftOneCar(IdCar, IdOldCl: String);
    procedure ShiftOneDrv(IdDrv, IdOldCl: String);
    procedure ShiftOneBill(IdBill, IdOldCl: String);
    function GetRelatedId(FName: String): String;
    procedure DeleteClient(Id: String);
    procedure DeleteOneCar(IdCar: String);
    procedure DeleteOneTip(TipulId, fName: String);
    procedure DeleteOneDrv(IdDrv: String);
    procedure DeleteOneBill(IdBill: String);
  end;

var
  dmUtils: TdmUtils;

implementation

{$R *.dfm}

{ TdmUtils }

procedure TdmUtils.ShiftClient(Id: String);
var
   sSql, IdOldCl: String;
begin
   sSql := 'SELECT * FROM KClient.db ' +
           'WHERE Id = ' + Id;
   ShiftRec(sSql, 'KClientOld.Db');
   IdOldCl := GetRelatedId('Id');
   ShiftCLnDtl(Id, IdOldCl);
   ShiftAllCar(Id, IdOldCl);
   ShiftAllDrv(Id, IdOldCl);
   ShiftAllBill(Id, IdOldCl);
   ShiftAllDocs(Id, IdOldCl);
end;

procedure TdmUtils.ShiftAllCar(Id, IdOldCl: String);
var
   IdCar: String;
begin
   with qrSrcLvl2 do
   begin
       Close;
       SQL.Text := 'SELECT * FROM KCar.db ' +
           'WHERE ClientId = ' + Id;
       Open;
       while not Eof do
       begin
           IdCar := FieldByName('Id').AsString;
           ShiftOneCar(IdCar, IdOldCl);
           Next;
       end;
       Close;
   end;
end;

procedure TdmUtils.ShiftAllDrv(Id, IdOldCl: String);
var
   IdDrv: String;
begin
   with qrSrcLvl2 do
   begin
       Close;
       SQL.Text := 'SELECT * FROM KDriver.db ' +
           'WHERE ClientId = ' + Id;
       Open;
       while not Eof do
       begin
           IdDrv := FieldByName('Id').AsString;
           ShiftOneDrv(IdDrv, IdOldCl);
           Next;
       end;
       Close;
   end;
end;

procedure TdmUtils.ShiftAllBill(Id, IdOldCl: String);
var
   IdBill: String;
begin
   with qrSrcLvl2 do
   begin
       Close;
       SQL.Text := 'SELECT * FROM KBillHis.db ' +
           'WHERE ClientId = ' + Id;
       Open;
       while not Eof do
       begin
           IdBill := FieldByName('Id').AsString;
           ShiftOneBill(IdBill, IdOldCl);
           Next;
       end;
       Close;
   end;
end;

procedure TdmUtils.ShiftAllDocs(Id, IdOldCl: String);
var
  i: Integer;
begin
  with qrSrcTofes do
  begin
     Close;
     SQL.Text := 'SELECT * FROM KClTofes.DB ' +
         'WHERE ClientId = ' + Id;
     Open;
     tbDestTofes.TableName := 'KClTofesOld.DB';
     tbDestTofes.Open;
     while not qrSrcTofes.Eof do
     begin
       tbDestTofes.Append;
       for i := 2 to qrSrcTofes.FieldCount -1 do
          tbDestTofes.Fields[i].Assign(qrSrcTofes.Fields[i]);
       tbDestTofes.FieldByName('ClientId').AsString := IdOldCl;
       tbDestTofes.Post;
       qrSrcTofes.Next;
     end;
     tbDestTofes.Close;

     Close;
   end;
end;

procedure TdmUtils.ShiftOneCar(IdCar, IdOldCl: String);
var
   sSql, IdOldCr: String;
begin
   sSql := 'SELECT * FROM KCar.db ' +
           'WHERE Id = ' + IdCar;
   ShiftRec(sSql, 'KCarOld');
   SetRelatedId('ClientId', IdOldCl);
   IdOldCr := GetRelatedId('Id');
   ShiftCarDtl(IdCar, IdOldCr);
end;

procedure TdmUtils.ShiftOneDrv(IdDrv, IdOldCl: String);
var
   sSql, IdOldDr: String;
begin
   sSql := 'SELECT * FROM KDriver.db ' +
           'WHERE Id = ' + IdDrv;
   ShiftRec(sSql, 'KDriverOld');
   SetRelatedId('ClientId', IdOldCl);
   IdOldDr := GetRelatedId('Id');
   ShiftDrvDtl(IdDrv, IdOldDr);
end;

procedure TdmUtils.ShiftOneBill(IdBill, IdOldCl: String);
var
   sSql, IdOldBl: String;
begin
   sSql := 'SELECT * FROM KBillHis.db ' +
           'WHERE Id = ' + IdBill;
   ShiftRec(sSql, 'KBillHisOld');
   SetRelatedId('ClientId', IdOldCl);
   IdOldBl := GetRelatedId('Id');
   ShiftBillDtl(IdBill, IdOldBl);
end;

procedure TdmUtils.ShiftCLnDtl(Id, IdOldCl: String);
var
   IdDtl: String;
begin
  with qrSrcLvl3 do
   begin
       Close;
       SQL.Text := 'SELECT * FROM KClFollow.DB ' +
           'WHERE ClientId = ' + Id;
       Open;
       while not Eof do
       begin
           IdDtl := FieldByName('Id').AsString;
           ShiftOneDtl('KClFollow.DB', 'KClFollowOld.DB', 'CLientId',
                       IdDtl, IdOldCl);
           Next;
       end;
       Close;
   end;
end;

procedure TdmUtils.ShiftCarDtl(IdCar, IdOldCr: String);
var
   IdDtl, IdOldTp: String;
   i: Integer;
begin
   with qrSrcLvl3 do
   begin
       Close;
       SQL.Text := 'SELECT * FROM KCrTipul.DB ' +
           'WHERE CarId = ' + IdCar;
       Open;
       while not Eof do
       begin
           IdDtl := FieldByName('Id').AsString;
           ShiftOneDtl('KCrTipul.DB', 'KCrTipulOld.DB', 'CarId',
                       IdDtl, IdOldCr);
           IdOldTp := GetRelatedId('Id');
           ShiftTipSubDtl(IdDtl, IdOldTp);
           Next;
       end;
       Close;
   end;

   with qrSrcLvl3 do
   begin
       Close;
       SQL.Text := 'SELECT * FROM KCrTipulHis.DB ' +
           'WHERE CarId = ' + IdCar;
       Open;
       while not Eof do
       begin
           IdDtl := FieldByName('Id').AsString;
           ShiftOneDtl('KCrTipulHis.DB', 'KCrTipulHisOld.DB', 'CarId',
                       IdDtl, IdOldCr);
           IdOldTp := GetRelatedId('Id');
           ShiftTipHisSubDtl(IdDtl, IdOldTp);
           Next;
       end;
       Close;
   end;

   with qrSrcLvl3 do
   begin
       Close;
       SQL.Text := 'SELECT * FROM KCrAcdnt.DB ' +
           'WHERE CarId = ' + IdCar;
       Open;
       while not Eof do
       begin
           IdDtl := FieldByName('Id').AsString;
           ShiftOneDtl('KCrAcdnt.DB', 'KCrAcdntOld.DB', 'CarId',
                       IdDtl, IdOldCr);
           Next;
       end;
       Close;
   end;

   with qrSrcLvl3 do
   begin
       Close;
       SQL.Text := 'SELECT * FROM KCrFollow.DB ' +
           'WHERE CarId = ' + IdCar;
       Open;
       while not Eof do
       begin
           IdDtl := FieldByName('Id').AsString;
           ShiftOneDtl('KCrFollow.DB', 'KCrFollowOld.DB', 'CarId',
                       IdDtl, IdOldCr);
           Next;
       end;
       Close;
   end;

   with qrSrcLvl3 do
   begin
       Close;
       SQL.Text := 'SELECT * FROM KCrTipulOut.DB ' +
           'WHERE CarId = ' + IdCar;
       Open;
       while not Eof do
       begin
           IdDtl := FieldByName('Id').AsString;
           ShiftOneDtl('KCrTipulOut.DB', 'KCrTipulOutOld.DB', 'CarId',
                       IdDtl, IdOldCr);
           Next;
       end;
       Close;
   end;

   with qrSrcTofes do
   begin
      Close;
      SQL.Text := 'SELECT * FROM KCrTofes.DB ' +
           'WHERE CarId = ' + IdCar;
      Open;
      tbDestTofes.TableName := 'KCrTofesOld.DB';
      tbDestTofes.Open;
      while not qrSrcTofes.Eof do
      begin
        tbDestTofes.Append;
        for i := 2 to qrSrcTofes.FieldCount -1 do
           tbDestTofes.Fields[i].Assign(qrSrcTofes.Fields[i]);
        tbDestTofes.FieldByName('CarId').AsString := IdOldCr;
        tbDestTofes.Post;
        qrSrcTofes.Next;
      end;
      tbDestTofes.Close;
      Close;
   end;
end;

procedure TdmUtils.ShiftTipSubDtl(TipulId, IdOldTp: String);
var
   IdDtl: String;
begin
   with qrSrcLvl4 do
   begin
       Close;
       SQL.Text := 'SELECT * FROM KCrTipulDtl.DB ' +
           'WHERE TipulId = ' + TipulId;
       Open;
       while not Eof do
       begin
           IdDtl := FieldByName('Id').AsString;
           ShiftOneDtl('KCrTipulDtl.DB', 'KCrTipulDtlOld.DB', 'TipulId',
                       IdDtl, IdOldTp);
           Next;
       end;
       Close;
   end;
end;

procedure TdmUtils.ShiftTipHisSubDtl(TipulId, IdOldTp: String);
var
   IdDtl: String;
begin
   with qrSrcLvl4 do
   begin
       Close;
       SQL.Text := 'SELECT * FROM KCrTipulDtlHis.DB ' +
           'WHERE TipulId = ' + TipulId;
       Open;
       while not Eof do
       begin
           IdDtl := FieldByName('Id').AsString;
           ShiftOneDtl('KCrTipulDtlHis.DB', 'KCrTipulDtlHisOld.DB', 'TipulId',
                       IdDtl, IdOldTp);
           Next;
       end;
       Close;
   end;
end;

procedure TdmUtils.ShiftDrvDtl(IdDrv, IdOldDr: String);
var
   IdDtl: String;
   I: Integer;
begin
   with qrSrcLvl3 do
   begin
       Close;
       SQL.Text := 'SELECT * FROM KDrHeiter.DB ' +
           'WHERE IdDriver = ' + IdDrv;
       Open;
       while not Eof do
       begin
           IdDtl := FieldByName('Id').AsString;
           ShiftOneDtl('KDrHeiter.DB', 'KDrHeiterOld.DB', 'IdDriver',
                       IdDtl, IdOldDr);
           Next;
       end;
       Close;
   end;

   with qrSrcLvl3 do
   begin
       Close;
       SQL.Text := 'SELECT * FROM KDrHeiterHis.DB ' +
           'WHERE IdDriver = ' + IdDrv;
       Open;
       while not Eof do
       begin
           IdDtl := FieldByName('Id').AsString;
           ShiftOneDtl('KDrHeiterHis.DB', 'KDrHeiterHisOld.DB', 'IdDriver',
                       IdDtl, IdOldDr);
           Next;
       end;
       Close;
   end;

   with qrSrcLvl3 do
   begin
       Close;
       SQL.Text := 'SELECT * FROM KDrTaho.DB ' +
           'WHERE DrvId = ' + IdDrv;
       Open;
       while not Eof do
       begin
           IdDtl := FieldByName('Id').AsString;
           ShiftOneDtl('KDrTaho.DB', 'KDrTahoOld.DB', 'DrvId',
                       IdDtl, IdOldDr);
           Next;
       end;
       Close;
   end;

   with qrSrcLvl3 do
   begin
       Close;
       SQL.Text := 'SELECT * FROM KDrAcdnt.DB ' +
           'WHERE IdDriver = ' + IdDrv;
       Open;
       while not Eof do
       begin
           IdDtl := FieldByName('Id').AsString;
           ShiftOneDtl('KDrAcdnt.DB', 'KDrAcdntOld.DB', 'IdDriver',
                       IdDtl, IdOldDr);
           Next;
       end;
       Close;
   end;

   with qrSrcLvl3 do
   begin
       Close;
       SQL.Text := 'SELECT * FROM KDrAvira.DB ' +
           'WHERE IdDriver = ' + IdDrv;
       Open;
       while not Eof do
       begin
           IdDtl := FieldByName('Id').AsString;
           ShiftOneDtl('KDrAvira.DB', 'KDrAviraOld.DB', 'IdDriver',
                       IdDtl, IdOldDr);
           Next;
       end;
       Close;
   end;

   with qrSrcLvl3 do
   begin
       Close;
       SQL.Text := 'SELECT * FROM KDrCourse.DB ' +
           'WHERE IdDriver = ' + IdDrv;
       Open;
       while not Eof do
       begin
           IdDtl := FieldByName('Id').AsString;
           ShiftOneDtl('KDrCourse.DB', 'KDrCourseOld.DB', 'IdDriver',
                       IdDtl, IdOldDr);
           Next;
       end;
       Close;
   end;

   with qrSrcLvl3 do
   begin
       Close;
       SQL.Text := 'SELECT * FROM KDrBdika.DB ' +
           'WHERE IdDriver = ' + IdDrv;
       Open;
       while not Eof do
       begin
           IdDtl := FieldByName('Id').AsString;
           ShiftOneDtl('KDrBdika.DB', 'KDrBdikaOld.DB', 'IdDriver',
                       IdDtl, IdOldDr);
           Next;
       end;
       Close;
   end;

   with qrSrcLvl3 do
   begin
       Close;
       SQL.Text := 'SELECT * FROM KDrFollow.DB ' +
           'WHERE DriverId = ' + IdDrv;
       Open;
       while not Eof do
       begin
           IdDtl := FieldByName('Id').AsString;
           ShiftOneDtl('KDrFollow.DB', 'KDrFollowOld.DB', 'DriverId',
                       IdDtl, IdOldDr);
           Next;
       end;
       Close;
   end;

   with qrSrcTofes do
   begin
      Close;
      SQL.Text := 'SELECT * FROM KDrTofes.DB ' +
          'WHERE DriverId = ' + IdDrv;
      Open;
      tbDestTofes.TableName := 'KDrTofesOld.DB';
      tbDestTofes.Open;
      while not qrSrcTofes.Eof do
      begin
        tbDestTofes.Append;
        for i := 2 to qrSrcTofes.FieldCount -1 do
           tbDestTofes.Fields[i].Assign(qrSrcTofes.Fields[i]);
        tbDestTofes.FieldByName('DriverId').AsString := IdOldDr;
        tbDestTofes.Post;
        qrSrcTofes.Next;
      end;
      tbDestTofes.Close;
      Close;
//       SQL.Text := 'UPDATE KDrTofesOld.db ' +
//                'SET DriverId = ' + IdOldDr + ' ' +
//                'WHERE DriverId = ' + IdDrv;
//       ExecSql;
   end;
end;

procedure TdmUtils.ShiftBillDtl(IdBill, IdOldBl: String);
var
   IdDtl: String;
begin
   with qrSrcLvl3 do
   begin
       Close;
       SQL.Text := 'SELECT * FROM KBlDetailHis.DB ' +
           'WHERE BillId = ' + IdBill;
       Open;
       while not Eof do
       begin
           IdDtl := FieldByName('Id').AsString;
           ShiftOneDtl('KBlDetailHis.DB', 'KBlDetailHisOld.DB', 'BillId',
                       IdDtl, IdOldBl);
           Next;
       end;
   end;
end;

procedure TdmUtils.ShiftOneDtl(FName, FOldName, FldName,
   IdDtl, IdOldCr: String);
var
   sSql: String;
begin
   sSql := 'SELECT * FROM ' + FName +
           ' WHERE Id = ' + IdDtl;
   ShiftRec(sSql, FOldName);
   SetRelatedId(FldName, IdOldCr);
end;

function TdmUtils.GetRelatedId(FName: String): String;
begin
   with tbDest do
   begin
       Open;
       Last;
       Result := FieldByName(FName).AsString;
       Close;
   end;
end;

procedure TdmUtils.SetRelatedId(FName, IdVal: String);
begin
   with tbDest do
   begin
       Open;
       Last;
       Edit;
       FieldByName(FName).AsString := IdVal;
       Post;
       Close;
   end;
end;

procedure TdmUtils.ShiftRec(sSql, dstName: String);
begin
   with qrSrcLvl1 do
   begin
      try
        Close;
        SQL.Text := sSql;
        Open;
        tbDest.TableName := dstName;
        bmGnrl.Execute;
      finally
        Close;
      end;
   end;
end;

procedure TdmUtils.DeleteClient(Id: String);
var
   stSql: String;
begin
   DeleteAllCar(Id);
   DeleteAllDrv(Id);
   DeleteAllBill(Id);
   DeleteAllDocs(Id);
   stSql := 'DELETE FROM KClient.DB '+
           'WHERE Id = ' + Id;
   DeleteRecs(stSql);
end;

procedure TdmUtils.DeleteAllCar(Id: String);
var
   IdCar: String;
begin
   with qrSrcLvl2 do
   begin
       Close;
       SQL.Text := 'SELECT * FROM KCar.db ' +
           'WHERE ClientId = ' + Id;
       Open;
       while not Eof do
       begin
           IdCar := FieldByName('Id').AsString;
           DeleteOneCar(IdCar);
           Next;
       end;
       Close;
   end;
end;

procedure TdmUtils.DeleteAllDrv(Id: String);
var
   IdDrv: String;
begin
   with qrSrcLvl2 do
   begin
       Close;
       SQL.Text := 'SELECT * FROM KDriver.db ' +
           'WHERE ClientId = ' + Id;
       Open;
       while not Eof do
       begin
           IdDrv := FieldByName('Id').AsString;
           DeleteOneDrv(IdDrv);
           Next;
       end;
       Close;
   end;
end;

procedure TdmUtils.DeleteAllBill(Id: String);
var
   IdBill: String;
begin
   with qrSrcLvl2 do
   begin
       Close;
       SQL.Text := 'SELECT * FROM KBillHis.db ' +
           'WHERE ClientId = ' + Id;
       Open;
       while not Eof do
       begin
           IdBill := FieldByName('Id').AsString;
           DeleteOneBill(IdBill);
           Next;
       end;
       Close;
   end;
end;

procedure TdmUtils.DeleteOneCar(IdCar: String);
var
   stSql, TipulId: String;
begin
   with qrSrcLvl3 do
   begin
       Close;
       SQL.Text := 'SELECT * FROM KCrTipul.db ' +
           'WHERE CarId = ' + IdCar;
       Open;
       while not Eof do
       begin
           TipulId := FieldByName('Id').AsString;
           DeleteOneTip(TipulId, 'KCrTipulDtl.db');
           Next;
       end;
       Close;
   end;

   stSql := 'DELETE FROM KCrTipul.db ' +
           'WHERE CarId = ' + IdCar;
   DeleteRecs(stSql);

   with qrSrcLvl3 do
   begin
       Close;
       SQL.Text := 'SELECT * FROM KCrTipulHis.db ' +
           'WHERE CarId = ' + IdCar;
       Open;
       while not Eof do
       begin
           TipulId := FieldByName('Id').AsString;
           DeleteOneTip(TipulId, 'KCrTipulDtlHis.db');
           Next;
       end;
       Close;
   end;
   stSql := 'DELETE FROM KCrTipulHis.db ' +
           'WHERE CarId = ' + IdCar;
   DeleteRecs(stSql);

   stSql := 'DELETE FROM KCrDrv.DB '+
           'WHERE CarId = ' + IdCar;
   DeleteRecs(stSql);
   stSql := 'DELETE FROM KCrAcdnt.DB '+
           'WHERE CarId = ' + IdCar;
   DeleteRecs(stSql);
   stSql := 'DELETE FROM KCrFollow.DB '+
           'WHERE CarId = ' + IdCar;
   DeleteRecs(stSql);
   stSql := 'DELETE FROM KCrTipulOut.DB '+
           'WHERE CarId = ' + IdCar;
   DeleteRecs(stSql);
   stSql := 'DELETE FROM KCrTofes.DB '+
           'WHERE CarId = ' + IdCar;
   DeleteRecsTofes(stSql);
   stSql := 'DELETE FROM KCar.DB '+
           'WHERE Id = ' + IdCar;
   DeleteRecs(stSql);
end;

procedure TdmUtils.DeleteOneTip(TipulId, fName: String);
var
   stSql: String;
begin
   stSql := 'DELETE FROM '+ fName +
           ' WHERE TipulId = ' + TipulId;
   DeleteRecs(stSql);
end;

procedure TdmUtils.DeleteOneDrv(IdDrv: String);
var
   stSql: String;
begin
   stSql := 'DELETE FROM KDrHeiter.DB '+
           'WHERE IdDriver = ' + IdDrv;
   DeleteRecs(stSql);
   stSql := 'DELETE FROM KDrHeiterHis.DB '+
           'WHERE IdDriver = ' + IdDrv;
   DeleteRecs(stSql);
   stSql := 'DELETE FROM KDrTaho.DB '+
           'WHERE DrvId = ' + IdDrv;
   stSql := 'DELETE FROM KDrAcdnt.DB '+
           'WHERE IdDriver = ' + IdDrv;
   DeleteRecs(stSql);
   stSql := 'DELETE FROM KDrAvira.DB '+
           'WHERE IdDriver = ' + IdDrv;
   DeleteRecs(stSql);
   stSql := 'DELETE FROM KDrBdika.DB '+
           'WHERE IdDriver = ' + IdDrv;
   DeleteRecs(stSql);
   stSql := 'DELETE FROM KDrCourse.DB '+
           'WHERE IdDriver = ' + IdDrv;
   DeleteRecs(stSql);
   stSql := 'DELETE FROM KDrFollow.DB '+
           'WHERE DriverId = ' + IdDrv;
   DeleteRecs(stSql);
   stSql := 'DELETE FROM KDrTofes.DB '+
           'WHERE DriverId = ' + IdDrv;
   DeleteRecsTofes(stSql);
   stSql := 'DELETE FROM KDriver.DB '+
           'WHERE Id = ' + IdDrv;
   DeleteRecs(stSql);
end;

procedure TdmUtils.DeleteOneBill(IdBill: String);
var
   stSql: String;
begin
   stSql := 'DELETE FROM KBlDetailHis.DB '+
           'WHERE BillId = ' + IdBill;
   DeleteRecs(stSql);
   stSql := 'DELETE FROM KBillHis.DB '+
           'WHERE Id = ' + IdBill;
   DeleteRecs(stSql);
end;

procedure TdmUtils.DeleteAllDocs(Id: String);
var
   stSql: String;
begin
   stSql := 'DELETE FROM KClTofes.DB '+
           'WHERE ClientId = ' + Id;
   DeleteRecsTofes(stSql);
end;

procedure TdmUtils.DeleteRecs(stSql: String);
begin
   qrSrcLvl1.SQL.Text := stSql;
   qrSrcLvl1.ExecSQL;
end;

procedure TdmUtils.DeleteRecsTofes(stSql: String);
begin
  qrSrcTofes.SQL.Text := stSql;
  qrSrcTofes.ExecSQL;
end;

end.
