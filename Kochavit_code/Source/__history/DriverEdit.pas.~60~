unit DriverEdit;

interface

uses
  Windows, SysUtils, Classes, Graphics, Controls, Forms, Dialogs, GnrlEdit,
  DB, ImgList, Menus, ActnList, ComCtrls, StdCtrls, ToolWin, Buttons,
  ExtCtrls, DBCtrls, Mask, Grids, DBGrids, MyChkDBGrid, ExtDlgs, StrUtils, DBActns,
  StdActns, System.Actions, System.ImageList;

type
  TfrmDriverEdit = class(TfrmGnrlEdit)
    Panel2: TPanel;
    Panel3: TPanel;
    Splitter1: TSplitter;
    Panel4: TPanel;
    Panel5: TPanel;
    GroupBox1: TGroupBox;
    GroupBox2: TGroupBox;
    Label1: TLabel;
    Label3: TLabel;
    edZeut: TDBEdit;
    Label2: TLabel;
    edShemD: TDBEdit;
    edKtovetD: TDBEdit;
    Label4: TLabel;
    Label5: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    Label10: TLabel;
    Label11: TLabel;
    Label12: TLabel;
    Label13: TLabel;
    Label15: TLabel;
    Label17: TLabel;
    edIsuvD: TDBEdit;
    edMikudD: TDBEdit;
    edTelD: TDBEdit;
    edCelD: TDBEdit;
    edBorn: TDBEdit;
    edLicenceNum: TDBEdit;
    edLicenceTyp: TDBEdit;
    edLimit: TDBEdit;
    edLicencePrd: TDBEdit;
    edWorkStrt: TDBEdit;
    edRemark: TDBMemo;
    PageControl2: TPageControl;
    TabSheet2: TTabSheet;
    DBGrid1: TDBGrid;
    Label18: TLabel;
    edCodDrv: TDBEdit;
    TabSheet3: TTabSheet;
    TabSheet4: TTabSheet;
    TabSheet5: TTabSheet;
    TabSheet6: TTabSheet;
    DBGrid2: TDBGrid;
    DBGrid3: TDBGrid;
    DBGrid4: TDBGrid;
    DBGrid5: TDBGrid;
    acAutoHeiter: TAction;
    Label16: TLabel;
    edOvedId: TDBLookupComboBox;
    TabSheet7: TTabSheet;
    CheckDBGrid1: TCheckDBGrid;
    acPrintAndDtl: TAction;
    TabSheet8: TTabSheet;
    DBGrid7: TDBGrid;
    ToolBar2: TToolBar;
    ToolButton1: TToolButton;
    acDrHeiterDel: TDataSetDelete;
    acDrTahoDel: TDataSetDelete;
    acDrAcdntDel: TDataSetDelete;
    acDrAviraDel: TDataSetDelete;
    acDrCourseDel: TDataSetDelete;
    acDrBdikaDel: TDataSetDelete;
    acDrFollowDel: TDataSetDelete;
    ToolBar3: TToolBar;
    ToolBar4: TToolBar;
    ToolButton3: TToolButton;
    ToolBar5: TToolBar;
    ToolButton4: TToolButton;
    ToolBar6: TToolBar;
    ToolButton5: TToolButton;
    ToolBar7: TToolBar;
    ToolButton6: TToolButton;
    ToolBar8: TToolBar;
    ToolButton7: TToolButton;
    ToolButton9: TToolButton;
    Panel1: TPanel;
    edRmrk: TDBMemo;
    edLicenceId: TDBLookupComboBox;
    TabSheet9: TTabSheet;
    DBGrid6: TDBGrid;
    ToolBar9: TToolBar;
    ToolButton10: TToolButton;
    acAddTipulim: TAction;
    ToolButton11: TToolButton;
    acCrDrvDel: TDataSetDelete;
    edEMail: TDBEdit;
    Label6: TLabel;
    acSendEmail: TAction;
    ToolButton12: TToolButton;
    procedure acDocumentExecute(Sender: TObject);
    procedure DBGrid6DblClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure edZeutExit(Sender: TObject);
    procedure acSaveExecute(Sender: TObject);
    procedure acMailExecute(Sender: TObject);
    procedure acPrintExecute(Sender: TObject);
    procedure acScanExecute(Sender: TObject);
    procedure acPhotoExecute(Sender: TObject);
    procedure acShowScanExecute(Sender: TObject);
    procedure DBGrid6Enter(Sender: TObject);
    procedure acPrintLabelExecute(Sender: TObject);
    procedure DBGrid1Enter(Sender: TObject);
    procedure CheckDBGrid1Enter(Sender: TObject);
    procedure edOvedIdKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure FormCreate(Sender: TObject);
    procedure edLicenceIdExit(Sender: TObject);
    procedure acShowFolderExecute(Sender: TObject);
    procedure acAddTipulimExecute(Sender: TObject);
    procedure Label6Click(Sender: TObject);
    procedure acSendEmailExecute(Sender: TObject);
  private
    { Private declarations }
    function  HasAllValue: Boolean;
    procedure AddTirgum(lstPerut: TStringList);
    function GetEMailsAdr(ToEmails: TStringList): Boolean;
  public

  end;

var
  frmDriverEdit: TfrmDriverEdit;

implementation

{$R *.dfm}
uses
   DataDM, MainDM, DriverEditDM, LogErrorUtil, ScanImport, ImportFile, ImportPhoto,
   CarEdit, DocUtils, LabelWriter, CarEditDM, DialogsHeb, GraphicUtils,
   SelectivePrintDlg, FolderList, ShellAPI, MailSendListDr;

procedure TfrmDriverEdit.FormCreate(Sender: TObject);
begin
  inherited;
  stClientName.Caption := 'שם החברה: ' + #13#10 + dmDriverEdit.ClientShem;
  if (dmDriverEdit.tbDriver.State = dsInsert) then
  begin
    acMail.Enabled := False;
    acPrint.Enabled := False;
    acScan.Enabled := False;
    acPhoto.Enabled := False;
    acDocument.Enabled := False;
    acPrintLabel.Enabled := False;
    acShowScan.Enabled := False;
    acAddTipulim.Enabled := False;
  end;
end;

//requiered fields
procedure TfrmDriverEdit.edZeutExit(Sender: TObject);
begin
  inherited;
   if ((Sender as TDbEdit).Text = '') or
        ((Sender as TDbEdit).Text = ' -       - ') then
   begin
       MessageDlg('חובה להקליד ערך', mtConfirmation, [mbOk], 0);
       (Sender as TDbEdit).SetFocus;
   end;
end;

procedure TfrmDriverEdit.edLicenceIdExit(Sender: TObject);
begin
  inherited;
  if ((Sender as TDbLookupCombobox).Text = '') then
  begin
       MessageDlg('חובה להקליד ערך', mtConfirmation, [mbOk], 0);
       (Sender as TDbLookupCombobox).SetFocus;
   end;
end;

function TfrmDriverEdit.HasAllValue: Boolean;
begin
  Result := CtrlHasValue(edCodDrv, edCodDrv.Text, '', 'חובה להקליד מספר סידורי') and
        CtrlHasValue(edZeut, edZeut.Text, '', 'חובה להקליד מספר ת. זהות') and
        CtrlHasValue(edLicenceNum, edLicenceNum.Text, '', 'חובה להקליד מספר רשיון') and
        CtrlHasValue(edLicenceTyp, edLicenceId.Text, '', 'חובה להקליד סוג רשיון');
end;
procedure TfrmDriverEdit.Label6Click(Sender: TObject);
begin
  inherited;

end;

//end requiered fields

procedure TfrmDriverEdit.edOvedIdKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  inherited;
  if (Key = VK_DELETE) then
    with (Sender as TDBLookupComboBox) do
      DataSource.DataSet.FieldByName(Field.KeyFields).Clear;
end;

procedure TfrmDriverEdit.acSaveExecute(Sender: TObject);
begin
  inherited;
  if HasAllValue then
  begin
    dmDriverEdit.SaveData;
    Close;
  end;
end;

procedure TfrmDriverEdit.DBGrid1Enter(Sender: TObject);
begin
  inherited;
  if (dmDriverEdit.tbDriver.State = dsInsert) and (dmDriverEdit.tbDrHeiter.IsEmpty) then
    dmDriverEdit.LoadHeterim;
end;

procedure TfrmDriverEdit.acAddTipulimExecute(Sender: TObject);
begin
  inherited;
  if dmDriverEdit.tbDrHeiter.IsEmpty then
    dmDriverEdit.LoadHeterim;
end;

procedure TfrmDriverEdit.DBGrid6Enter(Sender: TObject);
begin
  inherited;
  if dmMain.SelectAll then
    dmDriverEdit.SetCarFilter('', False)
  else
//    dmDriverEdit.SetCarFilter('ClientId = '+dmMain.tbClientId.AsString, True);
end;

procedure TfrmDriverEdit.CheckDBGrid1Enter(Sender: TObject);
begin
  inherited;
  if dmMain.SelectAll then
    dmDriverEdit.SetCarFilter('', False)
  else
//    dmDriverEdit.SetCarFilter('ClientId = '+dmMain.tbClientId.AsString, True);
end;

procedure TfrmDriverEdit.acMailExecute(Sender: TObject);
var
  WorkFile, nCopy: OleVariant;
  vPath, vButton, vMemo: String;
  vSave: Boolean;
  OneDoc: TDocUtils;
  lstPerut: TStringList;
begin
  inherited;
  vPath := ExtractFilePath(Application.ExeName);
  if SelectDoc(WorkFile, nCopy, vButton, vMemo, vPath+'Docs\Driver\', vSave) then
  begin
    Screen.Cursor := crHourGlass;
    lstPerut := TStringList.Create;
    dmDriverEdit.qrGnrl.SQL.LoadFromFile(vPath+'SQL\DriverFields.Txt');
    dmDriverEdit.qrGnrl.SQL.Add('WHERE Id = :Id');
    dmDriverEdit.qrGnrl.Open;
    AddTirgum(lstPerut);
    OneDoc := TDocUtils.Create(vButton, nCopy, vSave, 'הודעה לנהג',
          dmDriverEdit.qrGnrl.FieldByName('Fax').AsString,
          dmDriverEdit.qrGnrl.FieldByName('EMail').AsString,
          '', WorkFile);
    try
      OneDoc.SendDoc(dmDriverEdit.qrGnrl, lstPerut, Nil);
      if vSave and (vButton <> 'btnPreview') then
        dmDriverEdit.SaveBigData(ExtractFilePath(Application.ExeName) + 'Temp\' +
          ExtractFileName(WorkFile), ChangeFileExt(ExtractFileName(WorkFile), ''),
          'DOC', True);
    finally
      OneDoc.Free;
      lstPerut.Free;
      Screen.Cursor := crDefault;
    end;
  end;
end;

procedure TfrmDriverEdit.AddTirgum(lstPerut: TStringList);
begin
  lstPerut.Add('Perut');
  dmDriverEdit.tbDrHeiter.First;
  while not dmDriverEdit.tbDrHeiter.Eof do
  begin
    lstPerut.Add(dmDriverEdit.tbDrHeiterlHeiter.AsString + ' ' +
        dmDriverEdit.tbDrHeiterDateToDo.AsString);
    dmDriverEdit.tbDrHeiter.Next;
  end;
end;

procedure TfrmDriverEdit.acPrintExecute(Sender: TObject);
var
  Path: String;
begin
  inherited;
  dlgSelectivePrint := TdlgSelectivePrint.Create(Self);
  try
    if dlgSelectivePrint.ShowModal = mrOk then
    begin
      if dlgSelectivePrint.rgSelect.ItemIndex = 1 then
        dmDriverEdit.SetPrintFilter(dlgSelectivePrint.edDate.Date);

      Path := ExtractFilePath(Application.ExeName) + 'Report\';
      dmData.frxReport.LoadFromFile(Path+'rpDrvKartis.fr3');
      dmData.frxReport.PrepareReport;
      dmData.frxReport.Print;
    end;
  finally
    dmDriverEdit.CancelPrintFilter;
    dlgSelectivePrint.Free;
  end;
end;

procedure TfrmDriverEdit.acScanExecute(Sender: TObject);
begin
  inherited;
  dlgScanImport := TdlgScanImport.Create(Self);
  try
    with dlgScanImport do
    begin
      if (ShowModal = mrOk) then
        dmDriverEdit.SaveBigData(PathAndFile, edDocName.Text,
             ReplaceStr(ExtractFileExt(PathAndFile), '.', ''), SaveOnFolder);
    end;
  finally
    dlgScanImport.Free;
  end;
end;

procedure TfrmDriverEdit.acPhotoExecute(Sender: TObject);
begin
  inherited;
  dlgImportPhoto := TdlgImportPhoto.Create(Self);
  try
    with dlgImportPhoto do
    begin
      if (ShowModal = mrOk) then
      begin
        dmDriverEdit.SaveBigData(OpenPictureDialog.FileName, edDocName.Text,
             ReplaceStr(ExtractFileExt(OpenPictureDialog.FileName), '.', ''), SaveOnFolder);
        MovePhoto(PWideChar(OpenPictureDialog.FileName));
      end;
    end;
  finally
    dlgImportPhoto.Free;
  end;
end;

procedure TfrmDriverEdit.acDocumentExecute(Sender: TObject);
begin
  inherited;
  dlgImportFile := TdlgImportFile.Create(Self);
  try
    with dlgImportFile do
    begin
      if (ShowModal = mrOk) then
        dmDriverEdit.SaveBigData(PathAndFile, edDocName.Text,
            ReplaceStr(ExtractFileExt(PathAndFile), '.', ''), SaveOnFolder);
    end;
  finally
    dlgImportFile.Free;
  end;
end;

procedure TfrmDriverEdit.acShowScanExecute(Sender: TObject);
begin
  inherited;
  frmFolderList := TfrmFolderList.Create(Self);
  frmFolderList.OpenFile('KDrTofes', 'DriverId', dmDriverEdit.tbDriverId.AsString);
  frmFolderList.ShowModal;
end;

procedure TfrmDriverEdit.acShowFolderExecute(Sender: TObject);
var
  FolderName: String;
begin
  inherited;
  FolderName := ExtractFilePath(Application.ExeName)+'Documents\Driver\'+
    dmDriverEdit.tbDriverId.AsString;
  ShellExecute(Application.MainForm.Handle, nil, PChar(FolderName),
        nil, nil, SW_SHOW);
end;

procedure TfrmDriverEdit.acPrintLabelExecute(Sender: TObject);
var
  LabelFld: WideString;
begin
  inherited;
  LabelFld := 'שם הנהג: ' + dmDriverEdit.tbDriverShemD.AsString + #10#13 +
    dmDriverEdit.tbDriverKtovetD.AsString + #10#13 +
    dmDriverEdit.tbDriverIsuvD.AsString + ' ' +
    dmDriverEdit.tbDriverMikudD.AsString  + #10#13 +
    'סוג רשיון: ' + dmDriverEdit.tbDriverLicenceTyp.AsString;
  PrintLabel(LabelFld);
end;

procedure TfrmDriverEdit.acSendEmailExecute(Sender: TObject);
var
  ToEmails: TStringList;
  FilesDir: string;
begin
  inherited;
  ToEmails := TStringList.Create;
  try
    if GetEMailsAdr(ToEmails) then
    begin
      FilesDir :=  ExtractFilePath(Application.ExeName)+'Documents\Driver\'+
        dmDriverEdit.tbDriverId.AsString;
      OpenEmailUtil(ToEmails, dmDriverEdit.ClientShem + ' - '+ edShemD.Text,
          FilesDir, dmDriverEdit.tbDriverClientId.AsString, 'NULL', dmDriverEdit.tbDriverId.AsString);
    end
    else
      MessageDlgH('אין כתובות דואר אלקטרוני תקינות', mtWarning, [mbOk], 0, 0);
  finally
  end;
end;

function TfrmDriverEdit.GetEMailsAdr(ToEmails: TStringList): Boolean;
begin
  Result := False;
  dmDriverEdit.qrGnrl.SQL.Text := 'SELECT Email, EmailX FROM KClient '+
        'WHERE Id = ' + dmDriverEdit.tbDriverClientId.AsString;
  try
    dmDriverEdit.qrGnrl.Open;
    if not dmDriverEdit.qrGnrl.IsEmpty then
    begin
      if (dmDriverEdit.qrGnrl.FieldByName('Email').AsString <> '') then
      begin
        ToEmails.Add(dmDriverEdit.qrGnrl.FieldByName('Email').AsString);
        Result := True;
      end;
      if (dmDriverEdit.qrGnrl.FieldByName('EmailX').AsString <> '') then
      begin
        ToEmails.Add(dmDriverEdit.qrGnrl.FieldByName('EmailX').AsString);
        Result := True;
      end;
      if (edEMail.Text <> '') then
      begin
        ToEmails.Add(edEMail.Text);
        Result := True;
      end;
    end;
  finally
    dmDriverEdit.qrGnrl.Close;
  end;
end;

procedure TfrmDriverEdit.DBGrid6DblClick(Sender: TObject);
var
  Id: Integer;
begin
  inherited;
  if not Assigned(frmCarEdit) and (dmDriverEdit.tbCrDrvDriverId.AsString <> '') then
  begin
    Id := dmDriverEdit.tbCrDrvDriverId.AsInteger;
    try
      dmCarEdit := TdmCarEdit.Create(Self);
      dmCarEdit.SetDataState(False, Id);
      frmCarEdit := TfrmCarEdit.Create(Self);
    except
//      on E: EEDBError do
//      begin
//        dmCarEdit.Free;
//        MessageDlg('כרטיס פתוח ע"י משתמש אחר', mtError, [mbOK], 0);
//      end;
      on E: EDatabaseError do
      begin
        dmCarEdit.Free;
        HandelError('TfrmDriverEdit.DBGrid6DblClick', 'קיים קובץ לא תקין!!!'+ #10#13 + E.Message, E);
      end;
    end;
  end;
end;

procedure TfrmDriverEdit.FormCloseQuery(Sender: TObject;
  var CanClose: Boolean);
begin
  inherited;
  if dmDriverEdit.tbDriver.Modified then
  begin
    case MessageDlgH('קימים נתונים חדשים בכרטיס. האם לשמור?',
         mtConfirmation, mbYesNoCancel, 0, 0) of
      id_Yes: begin
                if not HasAllValue then
                  Exit;
                dmDriverEdit.SaveData;
                CanClose := True;
              end;
      id_No:  begin
                dmDriverEdit.tbDrHeiter.CancelCachedUpdates;
                CanClose := True;
              end;
      id_Cancel: CanClose := False;
    end;
  end
  else
    dmDriverEdit.tbDrHeiter.CancelCachedUpdates;
end;

procedure TfrmDriverEdit.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  dmDriverEdit.Free;
  inherited;
  frmDriverEdit := nil;
end;

end.
