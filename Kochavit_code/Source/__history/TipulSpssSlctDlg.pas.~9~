unit TipulSpssSlctDlg;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, GnrlSpssSlctDlg, edbcomps, DB, RpRave, RpDefine, RpBase, RpSystem,
  Spin, StdCtrls, Buttons, ExtCtrls, RpCon, frxClass, frxDBSet, RpRender,
  RpRenderHTML;

type
  TfrmTipulSpssSlctDlg = class(TfrmGnrlSpssSlctDlg)
    ccChartsTpl: TRvCustomConnection;
    frdbTipul: TfrxDBDataset;
    procedure FormCreate(Sender: TObject);
    procedure btnPrintClick(Sender: TObject);
    procedure ccChartsTplGetCols(Connection: TRvCustomConnection);
    procedure ccChartsTplGetRow(Connection: TRvCustomConnection);
  private
    procedure SetChart(pLabel, pCmt: String);
  public
    { Public declarations }
  end;

var
  frmTipulSpssSlctDlg: TfrmTipulSpssSlctDlg;

implementation
uses
  TipulFilterDM, RPTChart, GnrlSpssChart;

{$R *.dfm}

procedure TfrmTipulSpssSlctDlg.FormCreate(Sender: TObject);
begin
  inherited;
  LoadRprtItems('TS');
end;

procedure TfrmTipulSpssSlctDlg.btnPrintClick(Sender: TObject);
begin
  inherited;
  LoadSpssSql(dmTipulFilter.qrFilter.SQL.Text);
  qrSpss.Open;
  try
    if ((Sender as TBitBtn).Name = 'btnPrint') then
      PrintReport(dmTipulFilter.qrFilter.RecordCount, '0')
    else
      PreviewReport(dmTipulFilter.qrFilter.RecordCount, '0');
  finally
    qrSpss.Close;
  end;
end;

procedure TfrmTipulSpssSlctDlg.ccChartsTplGetCols(
  Connection: TRvCustomConnection);
begin
  inherited;
  Connection.WriteField('ChartTpl', dtGraphic, 30, '', '');
end;

procedure TfrmTipulSpssSlctDlg.ccChartsTplGetRow(
  Connection: TRvCustomConnection);
begin
  inherited;
  WriteChartData(Connection, frmChart.dcChart);
end;

procedure TfrmTipulSpssSlctDlg.SetChart(pLabel, pCmt: String);
begin
  frmChart.dcChart.Series[0].DataSource := qrSpss;
  frmChart.dcChart.Series[0].XLabelsSource := pLabel;
  frmChart.dcChart.Series[0].YValues.ValueSource := pCmt;
end;

end.
