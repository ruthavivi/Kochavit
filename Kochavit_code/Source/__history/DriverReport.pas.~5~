unit DriverReport;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, GnrlReport, DB, Menus, ImgList, ActnList, WordFunc, ComCtrls,
  StdCtrls, Buttons, ExtCtrls, Grids, DBGrids, DBCtrls, ToolWin, StdActns,
  DBActns;

type
  TfrmDriverReport = class(TfrmGnrlReport)
    procedure FormCreate(Sender: TObject);
    procedure DBGridTitleClick(Column: TColumn);
    procedure acPrintExecute(Sender: TObject);
    procedure acExcelExecute(Sender: TObject);
    procedure acMailExecute(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
  private
    procedure SetStatusBar;
    function SelectDoc(var WorkFile, nCopy: OleVariant;
               var vButton, vMemo: String; vPath: String): Boolean;
    procedure InsertData(WordObj: TWordObj; dSet: TDataSet;
           WorkFile, nCopy: OleVariant; vButton, vMemo: String);
  public
    { Public declarations }
  end;

var
  frmDriverReport: TfrmDriverReport;

implementation
uses
   DriverFilterDM, OpenToPrint, DriverRprtSlctDlg;
{$R *.dfm}

procedure TfrmDriverReport.FormCreate(Sender: TObject);
begin
  inherited;
  MarkIndexColumn('ShemD');
  SetStatusBar;
end;

procedure TfrmDriverReport.SetStatusBar;
var
   procent: String;
begin
  Procent := FormatFloat('#.##', StrToInt(dmDriverFilter.TotalSelectRec) /
          StrToInt(dmDriverFilter.TotalRec) * 100);
  StatusBar1.Panels[0].Text := ' סה"כ נהגים בדו"ח: ' + dmDriverFilter.TotalSelectRec +
      ' מתוך ' + dmDriverFilter.TotalRec + ' שהם: ' + Procent + '%';
end;

procedure TfrmDriverReport.DBGridTitleClick(Column: TColumn);
begin
  inherited;
  dmDriverFilter.SqlState.Order := GetOrders(Column);
  dmDriverFilter.ReOpen;
  MarkIndexColumn(Column.FieldName);
end;

procedure TfrmDriverReport.acPrintExecute(Sender: TObject);
begin
  inherited;
  frmDriverRprtSlctDlg := TfrmDriverRprtSlctDlg.Create(Self);
  frmDriverRprtSlctDlg.Show;
end;

procedure TfrmDriverReport.acExcelExecute(Sender: TObject);
begin
  inherited;
  SaveExcel(dmDriverFilter.qrFilter);
end;

procedure TfrmDriverReport.acMailExecute(Sender: TObject);
var
   WordObj: TWordObj;
   WorkFile, nCopy: OleVariant;
   vButton, vMemo: String;
begin
  inherited;
   if SelectDoc(WorkFile, nCopy, vButton, vMemo,
       ExtractFilePath(Application.ExeName) + 'Docs\') then
   begin
       WordObj := TWordObj.Create;
       with WordObj do
       begin
           if ConnectWord then
           begin
               InsertData(WordObj, dmDriverFilter.qrFilter, WorkFile, nCopy,
                          vButton, vMemo);
               CloseWord;
           end;
           Free;
       end;
   end;
end;

procedure TfrmDriverReport.InsertData(WordObj: TWordObj; dSet: TDataSet;
  WorkFile, nCopy: OleVariant; vButton, vMemo: String);
var
   i: integer;
begin
   with WordObj, dSet do
   begin
       DisableControls;
       First;
       while not EOF do
       begin
           OpenDoc(WorkFile);
           for i := 0 to FieldCount -1 do
           begin
               InsertBookMark(Fields.Fields[i].FieldName,
                           FieldByName(Fields.Fields[i].FieldName).AsString);
           end;
           if vButton = 'btnFax' then
//               FaxDoc(nCopy)
           else
               PrintDoc(nCopy);
           Next;
       end;
       EnableControls;
   end;
end;

function TfrmDriverReport.SelectDoc(var WorkFile, nCopy: OleVariant;
  var vButton, vMemo: String; vPath: String): Boolean;
begin
  Result := False;

   frmOpenToPrint := TfrmOpenToPrint.Create(self);
   with frmOpenToPrint do
   begin
       cbFilter.Visible := False;
       DirectoryListBox.Directory := vPath;
       Edit.Text := '';
       if ShowModal = mrOK then
       begin
           vPath := DirectoryListBox.Directory;
           WorkFile := vPath + '\' + Edit.Text;
           vButton := btnPress;
           nCopy := SpinEdit.Value;
           vMemo := Memo.Text;
           Result := True;
       end;
       Free;
   end
end;

procedure TfrmDriverReport.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  dmDriverFilter.qrFilter.Close;
  inherited;
  frmDriverReport := nil;
end;

end.
