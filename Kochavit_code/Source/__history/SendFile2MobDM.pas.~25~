unit SendFile2MobDM;

interface

uses
  Forms, Controls, System.SysUtils, System.Classes, System.Json, System.Json.Writers,
  System.Json.Builders, System.Json.Types, System.Json.Readers,
  Data.DB, edbcomps, Dialogs, DialogsHeb, LogErrorUtil,
  URLMon, ShellApi, MainDM;


type
  TCarInspect = record
    TestId: string;
    InspectDone: string;
    InspectTodo: string;
    CarKm: string;
    InspectRemark: string;
  end;

type
  TdmSendFile2Mob = class(TDataModule)
  private
    { Private declarations }
    StrW: TStringWriter;
    function Export2Json(qrTests: TEDBQuery): Boolean;
    procedure Save2Json;
    function DownloadFile(SourceFile, DestFile: string): Boolean;
    procedure ReadFromJson;
    procedure MoveToRecord(CarInspect: TCarInspect; pJtr: TJsonTextReader);
    procedure MoveRecord2File(CarInspect: TCarInspect);
  public
    { Public declarations }
    procedure SendTests2Mob(qrTests: TEDBQuery);
    procedure GetFileFromMob();
  end;

var
  dmSendFile2Mob: TdmSendFile2Mob;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

{ TdmSendFile2Mob }

procedure TdmSendFile2Mob.SendTests2Mob(qrTests: TEDBQuery);
begin
  Screen.Cursor := crHourGlass;
  if Export2Json(qrTests) then
    Save2Json;
end;

function TdmSendFile2Mob.Export2Json(qrTests: TEDBQuery): Boolean;
var
  Writer: TJsonTextWriter;
  MyClass: TObject;
begin
  Result := False;

  StrW := TStringWriter.Create();
  Writer := TJsonTextWriter.Create(StrW);
  Writer.Formatting := TJsonFormatting.Indented;
  qrTests.DisableControls;

  try
    try
      qrTests.Open;
      Writer.WriteStartArray;
      while not qrTests.Eof do
      begin
        Writer.WriteStartObject;
        Writer.WritePropertyName('test_id');
        Writer.WriteValue(qrTests.FieldByName('Id').AsString);
        Writer.WritePropertyName('car_codcar');
        Writer.WriteValue(qrTests.FieldByName('CodCar').AsString);
        Writer.WritePropertyName('car_number');
        Writer.WriteValue(qrTests.FieldByName('Number').AsString);
        Writer.WritePropertyName('car_type');
        Writer.WriteValue(qrTests.FieldByName('Type').AsString);
        Writer.WritePropertyName('test_name');
        Writer.WriteValue(qrTests.FieldByName('Tipul').AsString);
        Writer.WritePropertyName('test_date');
        Writer.WriteValue(qrTests.FieldByName('DateToDo').AsString);
        Writer.WritePropertyName('car_contact');
        Writer.WriteValue(qrTests.FieldByName('Contact').AsString);
        Writer.WritePropertyName('phone');
        Writer.WriteValue(qrTests.FieldByName('Tel').AsString);
        Writer.WritePropertyName('client_name');
        Writer.WriteValue(qrTests.FieldByName('Shem').AsString);
        Writer.WritePropertyName('location');
        Writer.WriteValue(qrTests.FieldByName('Atar').AsString);
        Writer.WriteEndObject;
        qrTests.Next;
      end;
    except on E: Exception do
      HandelError('TdmSendFile2Mob.Export2Json', 'תקלה בהפקת קובץ התראות לאתר' + #10#13 + E.Message, E);
    end;
  finally
    Writer.WriteEndArray;
    qrTests.EnableControls;
    Writer.Free;
    Result := True;
  end;
end;

procedure TdmSendFile2Mob.Save2Json;
var
  PathAndFileName: string;
  Texts: TStringList;
begin
  PathAndFileName := ExtractFilePath(Application.ExeName)+'JSON/tests.json';
  try
    try
      Texts := TStringList.Create;
      Texts.Add(StrW.ToString);
      Texts.WriteBOM := False;
      Texts.SaveToFile(PathAndFileName, TEncoding.UTF8);
    except on E: Exception do
      HandelError('TdmSendFile2Mob.Save2Json', 'תקלה בשמירת קובץ התראות ' + #10#13 + E.Message, E);
    end;
  finally
    Texts.Free;
    Screen.Cursor := crDefault;
    MessageDlg('הופק קובץ התראות לעדכון האתר', mtInformation, [mbOK], 0);
  end;
end;

procedure TdmSendFile2Mob.GetFileFromMob;
const
  SourceFile = 'http://nemo4web.net/kochavitmob/uploaded_files/tests.json';
  DestFile = 'D:\Temp\tests.json';
begin
  if DownloadFile(SourceFile, DestFile) then
  begin
//    ShowMessage('Download succesful!');
//    ShellExecute(Application.Handle, PChar('open'), PChar(DestFile),
//      PChar(''), nil, 1);
    ReadFromJson;
  end
  else
    ShowMessage('Error while downloading ' + SourceFile)
end;

function TdmSendFile2Mob.DownloadFile(SourceFile, DestFile: string): Boolean;
begin
  try
    Result := UrlDownloadToFile(nil, PChar(SourceFile), PChar(DestFile), 0, nil) = 0;
  except
    Result := False;
  end;
end;

procedure TdmSendFile2Mob.ReadFromJson;
var
  TextFile: TStringList;
  sr: TStringReader;
  Jtr: TJsonTextReader;
  CarInspects: TCarInspect;
begin
  TextFile := TStringList.Create;
  try
    TextFile.LoadFromFile('D:\My Programs\Kochavit4\JSON\car_inspects.json');
    sr := TStringReader.Create(TextFile.ToString);
    Jtr := TJsonTextReader(sr);
    while Jtr.Read do
    begin
      if Jtr.TokenType = TJsonToken.StartObject then
      begin
        MoveToRecord(CarInspects, Jtr);
        MoveRecord2File(CarInspects);
      end;
    end;
  finally
    Jtr.Free;
    sr.Free;
    TextFile.Free;
  end;
end;

procedure TdmSendFile2Mob.MoveToRecord(CarInspect: TCarInspect; pJtr: TJsonTextReader);
begin
  while pJtr.Read do
  begin
    if pJtr.TokenType = TJsonToken.PropertyName then
    begin
      if pJtr.Value.ToString = 'TestId' then
      begin
        pJtr.Read;
        CarInspect.TestId := pJtr.Value.AsString;
      end
      else if pJtr.Value.ToString = 'InspectDone' then
      begin
        pJtr.Read;
        CarInspect.InspectDone := pJtr.Value.AsString;
      end
      else if pJtr.Value.ToString = 'InspectToDo' then
      begin
        pJtr.Read;
        CarInspect.InspectTodo := pJtr.Value.AsString;
      end
      else if pJtr.Value.ToString = 'CarKm' then
      begin
        pJtr.Read;
        CarInspect.CarKm := pJtr.Value.AsString;
      end
      else if pJtr.Value.ToString = 'InspectRemark' then
      begin
        pJtr.Read;
        CarInspect.InspectRemark := pJtr.Value.AsString;
      end
    end
    else if pJtr.TokenType = TJsonToken.EndObject then
      Exit;
  end;
end;

procedure TdmSendFile2Mob.MoveRecord2File(CarInspect: TCarInspect);
begin
  dmMain.qrGnrl.SQL.Text := 'UPDATE KCrTipul SET Km = ' + CarInspect.CarKm +
          ' DateDone = DATE ' + QuotedStr(CarInspect.InspectDone) +
          ' DateToDo = DATE ' + QuotedStr(CarInspect.InspectToDo) +
end;

end.
