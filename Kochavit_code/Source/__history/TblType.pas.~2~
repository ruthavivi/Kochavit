unit TblType;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, GnrlTbl, DB, DBTables, ImgList, Grids, DBGrids, ExtCtrls,
  ComCtrls, StdCtrls, ToolWin, ActnList, DBCtrls, MyChkDBGrid, RpCon,
  RpConDS, RpConBDE, RpRave, RpDefine, RpBase, RpSystem, edbcomps;

type
  TfrmTypeTbl = class(TfrmGnrlTbl)
    tbTblType: TStringField;
    tbTblID: TAutoIncField;
    tbTblDoc: TStringField;
    rtType: TRvTableConnection;
    tbTblEngine: TStringField;
    procedure acPrintExecute(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure tbTblNewRecord(DataSet: TDataSet);
  private
    { Private declarations }
  public
    function KeepIntegrity(fldName, IdVal: String;
        FilesUses: array of String): Boolean;
  end;

var
  frmTypeTbl: TfrmTypeTbl;

implementation

{$R *.dfm}

procedure TfrmTypeTbl.FormCreate(Sender: TObject);
var
  Path: String;
  sr: TSearchRec;
begin
  inherited;
  Path := ExtractFilePath(Application.ExeName) + 'Docs\Tofes\*.doc';
  with dbGrid.Columns[1] do
  begin
    if FindFirst(Path, faAnyFile, sr) = 0 then
    repeat
      PickList.Append(sr.Name);
    until FindNext(sr) <> 0;
      FindClose(sr);
  end;
end;

function TfrmTypeTbl.KeepIntegrity(fldName, IdVal: String;
  FilesUses: array of String): Boolean;
begin

end;

procedure TfrmTypeTbl.acPrintExecute(Sender: TObject);
begin
  inherited;
  RvTbl.ExecuteReport('rpType');
end;

procedure TfrmTypeTbl.tbTblNewRecord(DataSet: TDataSet);
begin
  inherited;
  tbTblDoc.AsString := 'Tofes.Doc';
end;

end.
