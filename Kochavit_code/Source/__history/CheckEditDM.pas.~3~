unit CheckEditDM;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, GnrlEditDM, DB, edbcomps, RpBase, RpSystem, RpDefine, RpRave;

type
  TdmCheckEdit = class(TdmGnrlEdit)
    tbChecks: TEDBTable;
    tbChecksId: TAutoIncField;
    tbChecksClientId: TIntegerField;
    tbChecksBankId: TSmallintField;
    tbChecksAcount: TIntegerField;
    tbChecksCheckNo: TIntegerField;
    tbChecksCheckSum: TFloatField;
    tbChecksAfkadaD: TDateField;
    tbChecksPidyonD: TDateField;
    tbChecksBill: TIntegerField;
    tbChecksKabala: TIntegerField;
    tbChecksReturn: TBooleanField;
    tbChecksNifdaD: TDateField;
    tbTblBank: TEDBTable;
    tbChecksLkpBank: TStringField;
    procedure DataModuleCreate(Sender: TObject);
    procedure tbChecksNewRecord(DataSet: TDataSet);
    procedure tbChecksAfterPost(DataSet: TDataSet);
    procedure tbChecksAfkadaDSetText(Sender: TField; const Text: string);
  private
    { Private declarations }
  public
    procedure SetDataState(pState: Boolean; pId: Integer);
    procedure SaveData;
  end;

var
  dmCheckEdit: TdmCheckEdit;

implementation
uses
  DataDM, MainDM, ChecksListDM, KbFunc, LogErrorUtil;
{$R *.dfm}

procedure TdmCheckEdit.DataModuleCreate(Sender: TObject);
begin
  inherited;
  try
    tbChecks.Open;
  except
    on E: EDatabaseError do
    begin
      HandelError('TdmCheckEdit.DataModuleCreate', '!!! קיים קובץ לא תקין' + #10#13 + E.Message, E);
      Self.Destroy;
    end;
  end;
end;

procedure TdmCheckEdit.SetDataState(pState: Boolean; pId: Integer);
begin
  if dmMain.SelectAll then
    ClientShem := GetClientName(tbChecksClientId.AsString);
end;

procedure TdmCheckEdit.tbChecksNewRecord(DataSet: TDataSet);
begin
  inherited;
  tbChecksClientId.AsInteger := dmMain.qrClientList.FieldByName('Id').AsInteger;
end;

procedure TdmCheckEdit.tbChecksAfterPost(DataSet: TDataSet);
begin
  inherited;
  dmChecksList.qrChecksList.Refresh;
  dmChecksList.qrChecksList.Locate('Id', tbChecksId.AsInteger, []);
end;

procedure TdmCheckEdit.tbChecksAfkadaDSetText(Sender: TField;
  const Text: string);
begin
  inherited;
  if not ValidDate(Sender, Text) then
    Abort;
end;

procedure TdmCheckEdit.SaveData;
begin
  try
    tbChecks.Post;
  except
    on E: EDatabaseError do
      HandelError('TdmCheckEdit.SaveData', 'כרטיס לא נשמר' + E.Message, E);
  end;
end;

end.
